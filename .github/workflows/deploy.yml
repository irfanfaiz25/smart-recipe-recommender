name: Deploy SavoryAI Apps to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, pdo_sqlite, mysql, gd, zip, bcmath
          coverage: none

      - name: Copy environment file
        run: cp .env.example .env

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Generate application key
        run: php artisan key:generate

      - name: Create SQLite database
        run: touch database/database.sqlite

      - name: Run database migrations
        run: php artisan migrate --force

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, pdo_sqlite, mysql, gd, zip, bcmath
          coverage: none

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Composer dependencies (Production)
        run: composer install --no-dev --prefer-dist --no-interaction

      - name: Install NPM dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Prepare deployment files
        run: |
          # Copy production environment
          cp .env.production .env

          # Generate optimized autoloader
          composer dump-autoloader --optimize

          # Create post-deployment script
          cat > post-deploy.php << 'EOF'
          <?php
          // Post deployment script for Recipe App
          echo "Running post-deployment tasks...\n";

          // Clear caches
          if (file_exists('artisan')) {
              exec('php artisan config:clear');
              exec('php artisan cache:clear');
              exec('php artisan view:clear');
              exec('php artisan route:clear');
              
              // Cache for production
              exec('php artisan config:cache');
              exec('php artisan route:cache');
              exec('php artisan view:cache');
              
              echo "Caches cleared and optimized.\n";
          }

          // Set permissions
          if (is_dir('storage')) {
              exec('chmod -R 755 storage');
              echo "Storage permissions set.\n";
          }

          if (is_dir('bootstrap/cache')) {
              exec('chmod -R 755 bootstrap/cache');
              echo "Bootstrap cache permissions set.\n";
          }

          echo "Post-deployment completed successfully!\n";
          ?>
          EOF

      - name: Deploy to hosting via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./
          server-dir: /public_html/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/tests/**
            **/.env.example
            **/README.md
            **/package-lock.json
            **/composer.lock
            **/phpunit.xml
            **/postcss.config.js
            **/tailwind.config.js
            **/vite.config.js
            **/storage/logs/**
            !**/storage/logs/.gitignore
            **/storage/framework/cache/**
            !**/storage/framework/cache/.gitignore
            **/storage/framework/sessions/**
            !**/storage/framework/sessions/.gitignore
            **/storage/framework/views/**
            !**/storage/framework/views/.gitignore
            **/.github/**
            **/database/database.sqlite

      - name: Run post-deployment script
        uses: garygrossgarten/github-action-ssh-deploy@release
        with:
          command: |
            cd /public_html
            php post-deploy.php
            rm post-deploy.php
          host: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
        continue-on-error: true

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment berhasil!"
            echo "üöÄ Recipe App telah di-update di production"
          else
            echo "‚ùå Deployment gagal!"
            echo "üîç Silakan cek logs untuk detail error"
          fi
